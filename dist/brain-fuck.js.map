{"version":3,"sources":["utils/assert.js","constants/index.js","utils/jump.js","utils/santize-program.js","utils/converter.js","brain-fuck.js","../node_modules/parcel/src/builtins/hmr-runtime.js"],"names":["assertString","str","name","Error","trimLeft","assertNumber","num","assertObject","obj","constructor","assertArray","arr","MAX_CHAR_VALUE","EXTEND_SIZE","MEM_SIZE","BRAIN_FUCK_CONFIG","tokens","instructions","memoryPointerRight","memoryPointerLeft","instructionPointerIncrement","instructionPointerDecrement","output","input","loopStart","loopEnd","wordCount","splitter","jumpForward","_iptr","iptr","openBracketsCount","slice","join","jumpBackward","closeBracketsCount","program","whitelistedWords","replace","split","filter","token","includes","from","to","table","forEach","ch","hasOwnProperty","Object","entries","key","value","BrainFuck","config","memory","Array","fill","mptr","infinite","brainFuckConfig","assign","length","fetchInstruction","t1","performance","now","concat","val","Math","ceil","String","fromCharCode","charCodeAt","t2","compilationTime","module","exports","OVERLAY_ID","OldModule","bundle","Module","moduleName","call","hot","data","hotData","_acceptCallbacks","_disposeCallbacks","accept","fn","push","dispose","checkedAssets","assetsToAccept","parent","isParcelRequire","WebSocket","hostname","location","protocol","ws","onmessage","event","JSON","parse","type","handled","assets","asset","isNew","didAccept","hmrAcceptCheck","global","parcelRequire","id","every","generated","js","console","clear","hmrApply","v","hmrAcceptRun","reload","close","onclose","log","removeErrorOverlay","error","message","stack","overlay","createErrorOverlay","document","body","appendChild","getElementById","remove","createElement","stackTrace","innerText","innerHTML","getParents","modules","parents","k","d","dep","isArray","Function","deps","cached","cache","some","cb"],"mappings":"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","file":"brain-fuck.js","sourceRoot":"../src","sourcesContent":["export function assertString (str, name) {\n  if (typeof str !== 'string') {\n    throw new Error(`${name || ''} must be a string`.trimLeft());\n  }\n}\n\nexport function assertNumber (num, name) {\n  if (typeof num !== 'number') {\n    throw new Error(`${name || ''} must be a number`.trimLeft());\n  }\n}\n\nexport function assertObject (obj, name) {\n  if (!(obj && obj.constructor.name === 'Object')) {\n    throw new Error(`${name || ''} must be an object`.trimLeft());\n  }\n}\n\nexport function assertArray (arr, name) {\n  if (!(arr && arr.constructor.name === 'Array')) {\n    throw new Error(`${name || ''} must be an array`.trimLeft());\n  }\n}\n","const MAX_CHAR_VALUE = 256;\nconst EXTEND_SIZE = 10;\nconst MEM_SIZE = 300; // 300 cells\nconst BRAIN_FUCK_CONFIG = {\n  tokens: [\n    '>',\n    '<',\n    '+',\n    '-',\n    '.',\n    ',',\n    '[',\n    ']'\n  ],\n  instructions: {\n    memoryPointerRight: '>',\n    memoryPointerLeft: '<',\n    instructionPointerIncrement: '+',\n    instructionPointerDecrement: '-',\n    output: '.',\n    input: ',',\n    loopStart: '[',\n    loopEnd: ']',\n  },\n  wordCount: 1,\n  splitter: ''\n};\n\nexport { BRAIN_FUCK_CONFIG, EXTEND_SIZE, MAX_CHAR_VALUE, MEM_SIZE };\n","import { assertArray, assertNumber, assertObject } from './assert'\n\nexport function jumpForward (tokens, _iptr, instructions = {}) {\n  assertArray(tokens, 'tokens');\n  assertNumber(_iptr, 'instruction pointer');\n  assertObject(instructions, 'instructions');\n\n  let iptr = _iptr, openBracketsCount = 1;\n\n  while (openBracketsCount > 0) {\n    iptr += instructions.wordCount;\n\n    switch (tokens.slice(iptr, iptr + instructions.wordCount).join(' ')) {\n      case instructions.loopStart:\n        openBracketsCount++;\n        break;\n      case instructions.loopEnd:\n        openBracketsCount--;\n        break;\n    }\n  }\n\n  return iptr;\n}\n\nexport function jumpBackward (tokens, _iptr, instructions) {\n  assertArray(tokens, 'tokens');\n  assertNumber(_iptr, 'instruction pointer');\n  assertObject(instructions, 'instructions');\n\n  let iptr = _iptr, closeBracketsCount = 1;\n\n  while (closeBracketsCount > 0) {\n    iptr -= instructions.wordCount;\n\n    switch (tokens.slice(iptr, iptr + instructions.wordCount).join(' ')) {\n      case instructions.loopEnd:\n        closeBracketsCount++;\n        break;\n      case instructions.loopStart:\n        closeBracketsCount--;\n        break;\n    }\n  }\n\n  return iptr;\n}\n","import { assertString, assertArray } from './assert';\n\nexport default function (program, splitter, whitelistedWords = []) {\n  assertString(program, 'program');\n  assertString(splitter, 'splitter');\n  assertArray(whitelistedWords, 'whitelisted words');\n\n  return program\n    .replace(/\\n/g, '')\n    .split(splitter)\n    .filter(token => whitelistedWords.includes(token));\n}\n","import { assertString, assertObject } from './assert'\n\nexport default function (program, splitter, from, to) {\n  assertString(program, 'program');\n  assertString(splitter, 'splitter');\n  assertObject(from, 'from');\n  assertObject(to, 'to');\n\n  let output = '';\n  const table = {};\n\n  program\n    .split('')\n    .forEach(ch => {\n      if (table.hasOwnProperty(ch)) {\n        output += to[table[ch]] + splitter;\n      } else {\n        for (const [key, value] of Object.entries(from)) {\n          if (value === ch) {\n            table[value] = key;\n            output += to[key] + splitter;\n            break;\n          }\n        }\n      }\n    });\n\n  return output;\n}\n","import { assertString, assertObject } from './utils/assert';\nimport { BRAIN_FUCK_CONFIG, MAX_CHAR_VALUE, EXTEND_SIZE, MEM_SIZE } from './constants/index';\nimport { jumpBackward, jumpForward } from './utils/jump';\nimport sanitizeProgram from './utils/santize-program';\nimport converter from './utils/converter';\nclass BrainFuck {\n  constructor (program, input, config = {}) {\n    assertString(program, 'program');\n    assertObject(config, 'config');\n\n    this.program = program;\n    this.memory = Array(MEM_SIZE).fill(0);\n    this.input = input || '';\n    this.output = '';\n    this.iptr = 0; // instruction pointer\n    this.mptr = 0; // memory pointer\n    this.infinite = false;\n    this.brainFuckConfig = Object.assign({}, BRAIN_FUCK_CONFIG, config);\n  }\n\n  compile () {\n    const {\n      splitter,\n      tokens,\n      wordCount\n    } = this.brainFuckConfig;\n\n    this.tokens = sanitizeProgram(\n      this.program,\n      splitter,\n      tokens\n    );\n\n    if (!this.tokens.length) {\n      throw new Error('invalid program');\n    }\n\n    const {\n      memoryPointerRight,\n      memoryPointerLeft,\n      instructionPointerIncrement,\n      instructionPointerDecrement,\n      output,\n      input,\n      loopStart,\n      loopEnd\n    } = this.brainFuckConfig.instructions;\n    const fetchInstruction = () => this.tokens.slice(this.iptr, this.iptr + wordCount).join(splitter);\n    const t1 = performance.now();\n\n    while (this.iptr < this.tokens.length) {\n      if (performance.now() - t1 > 20000) { // infinite detection, there might be a better way than this :)\n        this.infinite = true;\n        break;\n      }\n\n      switch (fetchInstruction()) {\n        case memoryPointerRight:\n          if (this.mptr >= this.memory.length - 1) {\n            this.memory = this.memory.concat(Array(EXTEND_SIZE).fill(0));\n          }\n\n          this.mptr++;\n          break;\n        case memoryPointerLeft:\n          this.mptr = this.mptr - 1 < 0 ? this.mptr : this.mptr - 1;\n          break;\n        case instructionPointerIncrement:\n          this.memory[this.mptr] = (this.memory[this.mptr] + 1) % MAX_CHAR_VALUE;\n          break;\n        case instructionPointerDecrement:\n          let val = this.memory[this.mptr] - 1;\n\n          if (val < 0) {\n            val += MAX_CHAR_VALUE * (Math.ceil(-val / MAX_CHAR_VALUE))\n          }\n\n          this.memory[this.mptr] = val;\n          break;\n        case output:\n          this.output += String.fromCharCode(this.memory[this.mptr]);\n          break;\n        case input:\n          this.memory[this.mptr] = this.input.charCodeAt(0);\n          this.input = this.input.slice(1);\n          break;\n        case loopStart:\n          if (!this.memory[this.mptr]) {\n            this.iptr = jumpForward(this.tokens, this.iptr, {\n              loopStart,\n              loopEnd,\n              wordCount\n            });\n          }\n          break;\n        case loopEnd:\n          if (this.memory[this.mptr]) {\n            this.iptr = jumpBackward(this.tokens, this.iptr, {\n              loopStart,\n              loopEnd,\n              wordCount\n            });\n          }\n          break;\n      }\n\n      this.iptr += wordCount;\n    }\n\n    const t2 = performance.now();\n\n    return {\n      program: this.program,\n      input: this.input,\n      output: this.output,\n      memory: this.memory,\n      compilationTime: t2 - t1,\n      infinite: this.infinite\n    };\n  }\n\n  convert (program) {\n    return converter(\n      program,\n      this.brainFuckConfig.splitter,\n      BRAIN_FUCK_CONFIG.instructions,\n      this.brainFuckConfig.instructions\n    );\n  }\n}\n\nmodule.exports = BrainFuck;\n","var OVERLAY_ID = '__parcel__error__overlay__';\n\nvar OldModule = module.bundle.Module;\n\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData,\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n\n  module.bundle.hotData = null;\n}\n\nmodule.bundle.Module = Module;\nvar checkedAssets, assetsToAccept;\n\nvar parent = module.bundle.parent;\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = process.env.HMR_HOSTNAME || location.hostname;\n  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';\n  var ws = new WebSocket(protocol + '://' + hostname + ':' + process.env.HMR_PORT + '/');\n  ws.onmessage = function(event) {\n    checkedAssets = {};\n    assetsToAccept = [];\n\n    var data = JSON.parse(event.data);\n\n    if (data.type === 'update') {\n      var handled = false;\n      data.assets.forEach(function(asset) {\n        if (!asset.isNew) {\n          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);\n          if (didAccept) {\n            handled = true;\n          }\n        }\n      });\n\n      // Enable HMR for CSS by default.\n      handled = handled || data.assets.every(function(asset) {\n        return asset.type === 'css' && asset.generated.js;\n      });\n\n      if (handled) {\n        console.clear();\n\n        data.assets.forEach(function (asset) {\n          hmrApply(global.parcelRequire, asset);\n        });\n\n        assetsToAccept.forEach(function (v) {\n          hmrAcceptRun(v[0], v[1]);\n        });\n      } else if (location.reload) { // `location` global exists in a web worker context but lacks `.reload()` function.\n        location.reload();\n      }\n    }\n\n    if (data.type === 'reload') {\n      ws.close();\n      ws.onclose = function () {\n        location.reload();\n      }\n    }\n\n    if (data.type === 'error-resolved') {\n      console.log('[parcel] ✨ Error resolved');\n\n      removeErrorOverlay();\n    }\n\n    if (data.type === 'error') {\n      console.error('[parcel] 🚨  ' + data.error.message + '\\n' + data.error.stack);\n\n      removeErrorOverlay();\n\n      var overlay = createErrorOverlay(data);\n      document.body.appendChild(overlay);\n    }\n  };\n}\n\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n  }\n}\n\nfunction createErrorOverlay(data) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n\n  // html encode message and stack trace\n  var message = document.createElement('div');\n  var stackTrace = document.createElement('pre');\n  message.innerText = data.error.message;\n  stackTrace.innerText = data.error.stack;\n\n  overlay.innerHTML = (\n    '<div style=\"background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;\">' +\n      '<span style=\"background: red; padding: 2px 4px; border-radius: 2px;\">ERROR</span>' +\n      '<span style=\"top: 2px; margin-left: 5px; position: relative;\">🚨</span>' +\n      '<div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">' + message.innerHTML + '</div>' +\n      '<pre>' + stackTrace.innerHTML + '</pre>' +\n    '</div>'\n  );\n\n  return overlay;\n\n}\n\nfunction getParents(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return [];\n  }\n\n  var parents = [];\n  var k, d, dep;\n\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n      if (dep === id || (Array.isArray(dep) && dep[dep.length - 1] === id)) {\n        parents.push(k);\n      }\n    }\n  }\n\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n\n  return parents;\n}\n\nfunction hmrApply(bundle, asset) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (modules[asset.id] || !bundle.parent) {\n    var fn = new Function('require', 'module', 'exports', asset.generated.js);\n    asset.isNew = !modules[asset.id];\n    modules[asset.id] = [fn, asset.deps];\n  } else if (bundle.parent) {\n    hmrApply(bundle.parent, asset);\n  }\n}\n\nfunction hmrAcceptCheck(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (!modules[id] && bundle.parent) {\n    return hmrAcceptCheck(bundle.parent, id);\n  }\n\n  if (checkedAssets[id]) {\n    return;\n  }\n  checkedAssets[id] = true;\n\n  var cached = bundle.cache[id];\n\n  assetsToAccept.push([bundle, id]);\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    return true;\n  }\n\n  return getParents(global.parcelRequire, id).some(function (id) {\n    return hmrAcceptCheck(global.parcelRequire, id)\n  });\n}\n\nfunction hmrAcceptRun(bundle, id) {\n  var cached = bundle.cache[id];\n  bundle.hotData = {};\n  if (cached) {\n    cached.hot.data = bundle.hotData;\n  }\n\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData);\n    });\n  }\n\n  delete bundle.cache[id];\n  bundle(id);\n\n  cached = bundle.cache[id];\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      cb();\n    });\n    return true;\n  }\n}\n"]}